# Raster-vector interactions {#raster-vector}

## Prerequisites

```{python}
import pandas as pd
import matplotlib.pyplot as plt
pd.set_option("display.max_rows", 4)
pd.set_option("display.max_columns", 6)
pd.options.display.max_rows = 10
pd.options.display.max_columns = 6
pd.options.display.max_colwidth = 35
plt.rcParams["figure.figsize"] = (5, 5)
```

Packages...

```{python}
import numpy as np
import geopandas as gpd
import rasterio
import rasterio.mask
from rasterio.plot import show
```

Sample data...

```{python}
src = rasterio.open("data/srtm.tif")
pol = gpd.read_file("data/zion.gpkg")
```

## Introduction

## Raster cropping

```{python}
pol = pol.to_crs(src.crs)
```

```{python}
out_image, out_transform = rasterio.mask.mask(src, pol.geometry, crop = False, nodata = 9999)
```


```{python}
show(out_image)
```

```{python}
meta = src.meta
meta.update(height = out_image[0].shape[0])
meta.update(width = out_image[0].shape[1])
meta.update(transform = out_transform)
meta.update(nodata = 9999)
meta
```

```{python}
new_dataset = rasterio.open("output/srtm_cropped.tif", "w", **meta)
new_dataset.write(out_image)
new_dataset.close()
```

```{python}
src2 = rasterio.open("output/srtm_cropped.tif")
show(src2)
```

```{python}
src2.meta
```

```{python}
src2.read()
```

Plot...

```{python}
fig, axes = plt.subplots(ncols=3, figsize=(9,5))
show(src, ax=axes[0])
show(src, ax=axes[1])
show(src2, ax=axes[2])
axes[0].set_title("Original")
axes[1].set_title("Crop")
axes[2].set_title("Mask");
```


## Raster extraction

## Rasterization

## Spatial vectorization

```{python}
src = rasterio.open("data/grain.tif")
```

## Exercises
