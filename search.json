[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geocomputation with Python",
    "section": "",
    "text": "(is_on_ghactions = identical(Sys.getenv(\"GITHUB_ACTIONS\"), \"true\"))\n\n[1] TRUE\n\n(is_online = curl::has_internet())\n\n[1] TRUE\n\n(is_html = knitr::is_html_output())\n\n[1] TRUE\n\n\n\n1 Welcome"
  },
  {
    "objectID": "02-spatial-data.html#introduction",
    "href": "02-spatial-data.html#introduction",
    "title": "Appendix A — Geographic data in Python",
    "section": "A.1 Introduction",
    "text": "A.1 Introduction\n…\nImporting packages\n\nimport shapely.geometry\nimport geopandas as gpd"
  },
  {
    "objectID": "02-spatial-data.html#vector-data",
    "href": "02-spatial-data.html#vector-data",
    "title": "Appendix A — Geographic data in Python",
    "section": "A.2 Vector data",
    "text": "A.2 Vector data\n\nA.2.1 Vector layers\nThe typical data structure for vector data is a vector layer.\nImporting from file:\n\npath = gpd.datasets.get_path('naturalearth_lowres')\ndat = gpd.read_file(path)\n\nThe result is a GeoDataFrame:\n\ndat\n\n\n\n\n  \n    \n      \n      pop_est\n      continent\n      name\n      iso_a3\n      gdp_md_est\n      geometry\n    \n  \n  \n    \n      0\n      920938\n      Oceania\n      Fiji\n      FJI\n      8374.0\n      MULTIPOLYGON (((180.00000 -16.06713, 180.00000...\n    \n    \n      1\n      53950935\n      Africa\n      Tanzania\n      TZA\n      150600.0\n      POLYGON ((33.90371 -0.95000, 34.07262 -1.05982...\n    \n    \n      2\n      603253\n      Africa\n      W. Sahara\n      ESH\n      906.5\n      POLYGON ((-8.66559 27.65643, -8.66512 27.58948...\n    \n    \n      3\n      35623680\n      North America\n      Canada\n      CAN\n      1674000.0\n      MULTIPOLYGON (((-122.84000 49.00000, -122.9742...\n    \n    \n      4\n      326625791\n      North America\n      United States of America\n      USA\n      18560000.0\n      MULTIPOLYGON (((-122.84000 49.00000, -120.0000...\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      172\n      7111024\n      Europe\n      Serbia\n      SRB\n      101800.0\n      POLYGON ((18.82982 45.90887, 18.82984 45.90888...\n    \n    \n      173\n      642550\n      Europe\n      Montenegro\n      MNE\n      10610.0\n      POLYGON ((20.07070 42.58863, 19.80161 42.50009...\n    \n    \n      174\n      1895250\n      Europe\n      Kosovo\n      -99\n      18490.0\n      POLYGON ((20.59025 41.85541, 20.52295 42.21787...\n    \n    \n      175\n      1218208\n      North America\n      Trinidad and Tobago\n      TTO\n      43570.0\n      POLYGON ((-61.68000 10.76000, -61.10500 10.890...\n    \n    \n      176\n      13026129\n      Africa\n      S. Sudan\n      SSD\n      20880.0\n      POLYGON ((30.83385 3.50917, 29.95350 4.17370, ...\n    \n  \n\n177 rows × 6 columns\n\n\n\nBasic plotting using the .plot method:\n\ndat.plot()\n\n<AxesSubplot:>\n\n\n\n\n\n\n\nA.2.2 Geometry columns\nOne of the columns in a GeoDataFrame is a geometry column, of class GeoSeries. The geometry column contains the geometric part of the vector layer, e.g., the POLYGON or MULTIPOLYGON geometries of the 177 countries in dat:\n\ndat[\"geometry\"]\n\n0      MULTIPOLYGON (((180.00000 -16.06713, 180.00000...\n1      POLYGON ((33.90371 -0.95000, 34.07262 -1.05982...\n2      POLYGON ((-8.66559 27.65643, -8.66512 27.58948...\n3      MULTIPOLYGON (((-122.84000 49.00000, -122.9742...\n4      MULTIPOLYGON (((-122.84000 49.00000, -120.0000...\n                             ...                        \n172    POLYGON ((18.82982 45.90887, 18.82984 45.90888...\n173    POLYGON ((20.07070 42.58863, 19.80161 42.50009...\n174    POLYGON ((20.59025 41.85541, 20.52295 42.21787...\n175    POLYGON ((-61.68000 10.76000, -61.10500 10.890...\n176    POLYGON ((30.83385 3.50917, 29.95350 4.17370, ...\nName: geometry, Length: 177, dtype: geometry\n\n\n\n\nA.2.3 Geometries\nEach element in the geometry column is a (Simple Feature) geometry, of class shapely. For example, here is the first geometry (that of Canada):\n\ndat[\"geometry\"].iloc[2]\n\n\n\n\nand here is a specific geometry selected based on the \"name\" attribute:\n\ndat[dat[\"name\"] == \"Egypt\"][\"geometry\"].iloc[0]"
  },
  {
    "objectID": "02-spatial-data.html#raster-data",
    "href": "02-spatial-data.html#raster-data",
    "title": "Appendix A — Geographic data in Python",
    "section": "A.3 Raster data",
    "text": "A.3 Raster data\n…"
  },
  {
    "objectID": "02-spatial-data.html#coordinate-reference-systems",
    "href": "02-spatial-data.html#coordinate-reference-systems",
    "title": "Appendix A — Geographic data in Python",
    "section": "A.4 Coordinate Reference Systems",
    "text": "A.4 Coordinate Reference Systems\n…"
  },
  {
    "objectID": "02-spatial-data.html#units",
    "href": "02-spatial-data.html#units",
    "title": "Appendix A — Geographic data in Python",
    "section": "A.5 Units",
    "text": "A.5 Units\n…"
  },
  {
    "objectID": "02-spatial-data.html#exercises",
    "href": "02-spatial-data.html#exercises",
    "title": "Appendix A — Geographic data in Python",
    "section": "A.6 Exercises",
    "text": "A.6 Exercises\n…"
  }
]