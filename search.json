[{"path":"index.html","id":"welcome","chapter":"1 Welcome","heading":"1 Welcome","text":"","code":""},{"path":"prerequisites.html","id":"prerequisites","chapter":"2 Prerequisites","heading":"2 Prerequisites","text":"Python basics: basic data types, assignment, loops, function calls definitionnumpy: creating arrays, array data types, array reshaping, subsetting, assignment subsets, vectorized operations, -data values, masking assignmentpandas: creating Series (vectors) DataFrame (tables), indexes, subsetting, assignment subsets, calculating new columns, sorting, filtering, renaming columns, aggregation, join, reading writing","code":""},{"path":"prerequisites.html","id":"introduction","chapter":"2 Prerequisites","heading":"2.1 Introduction","text":"…","code":""},{"path":"spatial-class.html","id":"spatial-class","chapter":"3 Geographic data in Python","heading":"3 Geographic data in Python","text":"","code":""},{"path":"spatial-class.html","id":"introduction-1","chapter":"3 Geographic data in Python","heading":"3.1 Introduction","text":"…Importing packages","code":"import shapely.geometry\nimport geopandas as gpd# import matplotlib.pyplot as plt"},{"path":"spatial-class.html","id":"vector-data","chapter":"3 Geographic data in Python","heading":"3.2 Vector data","text":"","code":""},{"path":"spatial-class.html","id":"vector-layers","chapter":"3 Geographic data in Python","heading":"3.2.1 Vector layers","text":"typical data structure vector data vector layer.Importing file:result GeoDataFrame:Basic plotting using .plot method:","code":"path = gpd.datasets.get_path('naturalearth_lowres')\ndat = gpd.read_file(path)dat##        pop_est  ...                                           geometry\n## 0       920938  ...  MULTIPOLYGON (((180.00000 -16.06713, 180.00000...\n## 1     53950935  ...  POLYGON ((33.90371 -0.95000, 34.07262 -1.05982...\n## 2       603253  ...  POLYGON ((-8.66559 27.65643, -8.66512 27.58948...\n## 3     35623680  ...  MULTIPOLYGON (((-122.84000 49.00000, -122.9742...\n## 4    326625791  ...  MULTIPOLYGON (((-122.84000 49.00000, -120.0000...\n## ..         ...  ...                                                ...\n## 172    7111024  ...  POLYGON ((18.82982 45.90887, 18.82984 45.90888...\n## 173     642550  ...  POLYGON ((20.07070 42.58863, 19.80161 42.50009...\n## 174    1895250  ...  POLYGON ((20.59025 41.85541, 20.52295 42.21787...\n## 175    1218208  ...  POLYGON ((-61.68000 10.76000, -61.10500 10.890...\n## 176   13026129  ...  POLYGON ((30.83385 3.50917, 29.95350 4.17370, ...\n## \n## [177 rows x 6 columns]# dat.plot()"},{"path":"spatial-class.html","id":"geometry-columns","chapter":"3 Geographic data in Python","heading":"3.2.2 Geometry columns","text":"…","code":""},{"path":"spatial-class.html","id":"geometries","chapter":"3 Geographic data in Python","heading":"3.2.3 Geometries","text":"…","code":""},{"path":"spatial-class.html","id":"raster-data","chapter":"3 Geographic data in Python","heading":"3.3 Raster data","text":"…","code":""},{"path":"spatial-class.html","id":"coordinate-reference-systems","chapter":"3 Geographic data in Python","heading":"3.4 Coordinate Reference Systems","text":"…","code":""},{"path":"spatial-class.html","id":"units","chapter":"3 Geographic data in Python","heading":"3.5 Units","text":"…","code":""},{"path":"spatial-class.html","id":"exercises","chapter":"3 Geographic data in Python","heading":"3.6 Exercises","text":"…","code":""}]
