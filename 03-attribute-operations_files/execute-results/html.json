{
  "hash": "77dd1743e3b4052e992cb2580668fffa",
  "result": {
    "markdown": "# Attribute data operations {#attr}\n\n## Prerequisites\n\n\n\nPackages...\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport rasterio\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/michael/.local/lib/python3.8/site-packages/geopandas/_compat.py:111: UserWarning:\n\nThe Shapely GEOS version (3.10.2-CAPI-1.16.0) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n\n```\n:::\n:::\n\n\nSample data...\n\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nworld = gpd.read_file('data/world.gpkg')\nsrc_elev = rasterio.open('data/elev.tif')\nsrc_multi_rast = rasterio.open('data/landsat.tif')\n```\n:::\n\n\n## Introduction\n\n...\n\n## Vector attribute manipulation\n\nAs mentioned previously (...), vector layers (`GeoDataFrame`, from package `geopandas`) are basically extended tables (`DataFrame` from package `pandas`), the difference being that a vector layer has a geometry column. Since `GeoDataFrame` extends `DataFrame`, all ordinary table-related operations from package `pandas` are supported for vector laters as well, as shown below.\n\n### Vector attribute subsetting {#sec-vector-attribute-subsetting}\n\n`pandas` supports several subsetting interfaces, though the most [recommended](https://stackoverflow.com/questions/38886080/python-pandas-series-why-use-loc) ones are:\n\n* `.loc`, which uses pandas indices, and\n* `.iloc`, which uses (implicit) numpy-style numeric indices.\n\nIn both cases the method is followed by square brackets, and two indices, separated by a comma. Each index can comprise:\n\n* A specific value, as in `1`\n* A slice, as in `0:3`\n* A `list`, as in `[0,2,4]`\n* `:`—indicating \"all\" indices\n\nThe once exception which we are going to with subsetting by indices is when selecting columns, directly using a list, as in `df[['a','b']]`, instead of `df.loc[:, ['a','b']]`, to select columns `'a'` and `'b'` from `df`.\n\nHere are few examples of subsetting the `GeoDataFrame` of world countries.\n\nSubsetting rows by position:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nworld.iloc[0:3, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>continent</th>\n      <th>...</th>\n      <th>lifeExp</th>\n      <th>gdpPercap</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>69.960</td>\n      <td>8222.253784</td>\n      <td>MULTIPOLYGON (((-180.00000 -16....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>64.163</td>\n      <td>2402.099404</td>\n      <td>MULTIPOLYGON (((33.90371 -0.950...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>MULTIPOLYGON (((-8.66559 27.656...</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nSubsetting columns by position:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nworld.iloc[:, 0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>continent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Oceania</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Africa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>Africa</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Kosovo</td>\n      <td>Europe</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>North America</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>South Sudan</td>\n      <td>Africa</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nSubsetting rows and columns by position:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nworld.iloc[0:3, 0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>continent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Oceania</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Africa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>Africa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSubsetting columns by name:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nworld[['name_long', 'geometry']]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name_long</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Fiji</td>\n      <td>MULTIPOLYGON (((-180.00000 -16....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tanzania</td>\n      <td>MULTIPOLYGON (((33.90371 -0.950...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Western Sahara</td>\n      <td>MULTIPOLYGON (((-8.66559 27.656...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>Kosovo</td>\n      <td>MULTIPOLYGON (((20.59025 41.855...</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>Trinidad and Tobago</td>\n      <td>MULTIPOLYGON (((-61.68000 10.76...</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>South Sudan</td>\n      <td>MULTIPOLYGON (((30.83385 3.5091...</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n\"Slice\" of columns between given ones:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nworld.loc[:, 'name_long':'pop']\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name_long</th>\n      <th>continent</th>\n      <th>region_un</th>\n      <th>...</th>\n      <th>type</th>\n      <th>area_km2</th>\n      <th>pop</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Fiji</td>\n      <td>Oceania</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>Sovereign country</td>\n      <td>19289.970733</td>\n      <td>885806.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tanzania</td>\n      <td>Africa</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>Sovereign country</td>\n      <td>932745.792357</td>\n      <td>52234869.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Western Sahara</td>\n      <td>Africa</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>Indeterminate</td>\n      <td>96270.601041</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>Kosovo</td>\n      <td>Europe</td>\n      <td>Europe</td>\n      <td>...</td>\n      <td>Sovereign country</td>\n      <td>11230.261672</td>\n      <td>1821800.0</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>Trinidad and Tobago</td>\n      <td>North America</td>\n      <td>Americas</td>\n      <td>...</td>\n      <td>Sovereign country</td>\n      <td>7737.809855</td>\n      <td>1354493.0</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>South Sudan</td>\n      <td>Africa</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>Sovereign country</td>\n      <td>624909.099086</td>\n      <td>11530971.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nSubsetting by a boolean series:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nx = np.array([1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], dtype=bool)\nworld.iloc[:, x]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>pop</th>\n      <th>lifeExp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>885806.0</td>\n      <td>69.960000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>52234869.0</td>\n      <td>64.163000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Kosovo</td>\n      <td>1821800.0</td>\n      <td>71.097561</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>1354493.0</td>\n      <td>70.426000</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>South Sudan</td>\n      <td>11530971.0</td>\n      <td>55.817000</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can remove a specific row by id use the `.drop` method:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nworld.drop([2, 3, 5])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>continent</th>\n      <th>...</th>\n      <th>lifeExp</th>\n      <th>gdpPercap</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>69.960000</td>\n      <td>8222.253784</td>\n      <td>MULTIPOLYGON (((-180.00000 -16....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>64.163000</td>\n      <td>2402.099404</td>\n      <td>MULTIPOLYGON (((33.90371 -0.950...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>US</td>\n      <td>United States</td>\n      <td>North America</td>\n      <td>...</td>\n      <td>78.841463</td>\n      <td>51921.984639</td>\n      <td>MULTIPOLYGON (((-171.73166 63.7...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Kosovo</td>\n      <td>Europe</td>\n      <td>...</td>\n      <td>71.097561</td>\n      <td>8698.291559</td>\n      <td>MULTIPOLYGON (((20.59025 41.855...</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>North America</td>\n      <td>...</td>\n      <td>70.426000</td>\n      <td>31181.821196</td>\n      <td>MULTIPOLYGON (((-61.68000 10.76...</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>South Sudan</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>55.817000</td>\n      <td>1935.879400</td>\n      <td>MULTIPOLYGON (((30.83385 3.5091...</td>\n    </tr>\n  </tbody>\n</table>\n<p>174 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nOr remove specific columns using the `.drop` method and `axis=1` (i.e., columns):\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nworld.drop(['name_long', 'continent'], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>region_un</th>\n      <th>subregion</th>\n      <th>...</th>\n      <th>lifeExp</th>\n      <th>gdpPercap</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Oceania</td>\n      <td>Melanesia</td>\n      <td>...</td>\n      <td>69.960000</td>\n      <td>8222.253784</td>\n      <td>MULTIPOLYGON (((-180.00000 -16....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Africa</td>\n      <td>Eastern Africa</td>\n      <td>...</td>\n      <td>64.163000</td>\n      <td>2402.099404</td>\n      <td>MULTIPOLYGON (((33.90371 -0.950...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Africa</td>\n      <td>Northern Africa</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>MULTIPOLYGON (((-8.66559 27.656...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Europe</td>\n      <td>Southern Europe</td>\n      <td>...</td>\n      <td>71.097561</td>\n      <td>8698.291559</td>\n      <td>MULTIPOLYGON (((20.59025 41.855...</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Americas</td>\n      <td>Caribbean</td>\n      <td>...</td>\n      <td>70.426000</td>\n      <td>31181.821196</td>\n      <td>MULTIPOLYGON (((-61.68000 10.76...</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>Africa</td>\n      <td>Eastern Africa</td>\n      <td>...</td>\n      <td>55.817000</td>\n      <td>1935.879400</td>\n      <td>MULTIPOLYGON (((30.83385 3.5091...</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can rename (some of) the selected columns using the `.rename` method:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nworld[['name_long', 'pop']].rename(columns={'pop': 'population'})\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name_long</th>\n      <th>population</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Fiji</td>\n      <td>885806.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Tanzania</td>\n      <td>52234869.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Western Sahara</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>Kosovo</td>\n      <td>1821800.0</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>Trinidad and Tobago</td>\n      <td>1354493.0</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>South Sudan</td>\n      <td>11530971.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe standard `numpy` comparison operators can be used in boolean subsetting, as illustrated in Table ...\n\nTABLE ...: Comparison operators that return Booleans (TRUE/FALSE).\n\n|`Symbol` | `Name` |\n|---|---|\n| `==` | Equal to |\n| `!=` | Not equal to |\n| `>`, `<` | Greater/Less than |\n| `>=`, `<=` | Greater/Less than or equal |\n| `&`, `|`, `~` | Logical operators: And, Or, Not |\n\nA demonstration of the utility of using logical vectors for subsetting is shown in the code chunk below. This creates a new object, small_countries, containing nations whose surface area is smaller than 10,000 km^2^:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nidx_small = world['area_km2'] < 10000  ## a logical 'Series'\nsmall_countries = world[idx_small]\nsmall_countries\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>continent</th>\n      <th>...</th>\n      <th>lifeExp</th>\n      <th>gdpPercap</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>45</th>\n      <td>PR</td>\n      <td>Puerto Rico</td>\n      <td>North America</td>\n      <td>...</td>\n      <td>79.390122</td>\n      <td>35066.046376</td>\n      <td>MULTIPOLYGON (((-66.28243 18.51...</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>PS</td>\n      <td>Palestine</td>\n      <td>Asia</td>\n      <td>...</td>\n      <td>73.126000</td>\n      <td>4319.528283</td>\n      <td>MULTIPOLYGON (((35.39756 31.489...</td>\n    </tr>\n    <tr>\n      <th>89</th>\n      <td>VU</td>\n      <td>Vanuatu</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>71.709000</td>\n      <td>2892.341604</td>\n      <td>MULTIPOLYGON (((166.79316 -15.6...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>None</td>\n      <td>Northern Cyprus</td>\n      <td>Asia</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>MULTIPOLYGON (((32.73178 35.140...</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>CY</td>\n      <td>Cyprus</td>\n      <td>Asia</td>\n      <td>...</td>\n      <td>80.173000</td>\n      <td>29786.365653</td>\n      <td>MULTIPOLYGON (((32.73178 35.140...</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>North America</td>\n      <td>...</td>\n      <td>70.426000</td>\n      <td>31181.821196</td>\n      <td>MULTIPOLYGON (((-61.68000 10.76...</td>\n    </tr>\n  </tbody>\n</table>\n<p>7 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe intermediary `idx_small` (short for index representing small countries) is a boolean `Series` that can be used to subset the seven smallest countries in the world by surface area. A more concise command, which omits the intermediary object, generates the same result:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nsmall_countries = world[world['area_km2'] < 10000]\n```\n:::\n\n\nThe various methods shown above can be chained for any combination with several subsetting steps. For example:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nworld[world['continent'] == 'Asia']  \\\n    .loc[:, ['name_long', 'continent']]  \\\n    .iloc[0:5, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name_long</th>\n      <th>continent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>Kazakhstan</td>\n      <td>Asia</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Uzbekistan</td>\n      <td>Asia</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Indonesia</td>\n      <td>Asia</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Timor-Leste</td>\n      <td>Asia</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>Israel</td>\n      <td>Asia</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can also combine indexes\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nidx_small = world['area_km2'] < 10000\nidx_asia = world['continent'] == 'Asia'\nworld.loc[idx_small & idx_asia, ['name_long', 'continent', 'area_km2']]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name_long</th>\n      <th>continent</th>\n      <th>area_km2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>79</th>\n      <td>Palestine</td>\n      <td>Asia</td>\n      <td>5037.103826</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>Northern Cyprus</td>\n      <td>Asia</td>\n      <td>3786.364506</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Cyprus</td>\n      <td>Asia</td>\n      <td>6207.006191</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Vector attribute aggregation\n\nAggregation involves summarizing data with one or more *grouping variables*, typically from columns in the table to be aggregated (geographic aggregation is covered in the next chapter). An example of attribute aggregation is calculating the number of people per continent based on country-level data (one row per country). The `world` dataset contains the necessary ingredients: the columns `pop` and `continent`, the population and the grouping variable, respectively. The aim is to find the `sum()` of country populations for each continent, resulting in a smaller data frame (aggregation is a form of data reduction and can be a useful early step when working with large datasets). This can be done with a combination of `.groupby` and `.sum`:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nworld_agg1 = world[['continent', 'pop']].groupby('continent').sum()\nworld_agg1\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pop</th>\n    </tr>\n    <tr>\n      <th>continent</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Africa</th>\n      <td>1.154947e+09</td>\n    </tr>\n    <tr>\n      <th>Antarctica</th>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>Asia</th>\n      <td>4.311408e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Oceania</th>\n      <td>3.775783e+07</td>\n    </tr>\n    <tr>\n      <th>Seven seas (open ocean)</th>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>South America</th>\n      <td>4.120608e+08</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe result is a (non-spatial) table with eight rows, one per continent, and two columns reporting the name and population of each continent.\n\nAlternatively, to include the geometry in the aggregation result, we can use the `.dissolve` method. That way, in addition to the summed population we also get the associated geometry per continent, i.e., the union of all countries. Note that we use the `by` parameter to choose which column(s) are used for grouping, and the `aggfunc` parameter to choose the summary function for non-geometry columns:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nworld_agg2 = world[['continent', 'pop', 'geometry']] \\\n    .dissolve(by='continent', aggfunc='sum')\nworld_agg2\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geometry</th>\n      <th>pop</th>\n    </tr>\n    <tr>\n      <th>continent</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Africa</th>\n      <td>MULTIPOLYGON (((-11.43878 6.785...</td>\n      <td>1.154947e+09</td>\n    </tr>\n    <tr>\n      <th>Antarctica</th>\n      <td>MULTIPOLYGON (((-61.13898 -79.9...</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>Asia</th>\n      <td>MULTIPOLYGON (((48.67923 14.003...</td>\n      <td>4.311408e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Oceania</th>\n      <td>MULTIPOLYGON (((147.91405 -43.2...</td>\n      <td>3.775783e+07</td>\n    </tr>\n    <tr>\n      <th>Seven seas (open ocean)</th>\n      <td>POLYGON ((68.93500 -48.62500, 6...</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>South America</th>\n      <td>MULTIPOLYGON (((-68.63999 -55.5...</td>\n      <td>4.120608e+08</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nHere is a plot of the result:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nworld_agg2.plot(column='pop');\n```\n\n::: {.cell-output .cell-output-display}\n![](03-attribute-operations_files/figure-html/cell-21-output-1.png){width=429 height=221}\n:::\n:::\n\n\nThe resulting `world_agg2` object is a vector layer containing 8 features representing the continents of the world (and the open ocean). \n\nOther options for the `aggfunc` parameter in `.dissolve` [include](https://geopandas.org/en/stable/docs/user_guide/aggregation_with_dissolve.html):\n\n* `'first'`\n* `'last'`\n* `'min'`\n* `'max'`\n* `'sum'`\n* `'mean'`\n* `'median'`\n\nAdditionally, we can pass a custom functiom.\n\nFor example, here is how we can calculate the summed population, summed area, and count of countries, per continent. We do this in two steps, then join the results:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nworld_agg3a = world[['continent', 'area_km2', 'geometry']] \\\n    .dissolve(by='continent', aggfunc='sum')\nworld_agg3b = world[['continent', 'name_long', 'geometry']] \\\n    .dissolve(by='continent', aggfunc=lambda x: x.nunique()) \\\n    .rename(columns={'name_long': 'n'})\nworld_agg = pd.merge(world_agg3a, world_agg3b, on='continent')\n```\n:::\n\n\n...\n\n### Vector attribute joining {#sec-vector-attribute-joining}\n\nCombining data from different sources is a common task in data preparation. Joins do this by combining tables based on a shared 'key' variable. `pandas` has a function named `pd.merge` for joining tables or vector layers based on common column(s). The `pd.merge` function follows conventions used in the database language SQL (Grolemund and Wickham 2016). Using `pd.merge` to join non-spatial datasets to vector layers is the focus of this section. The `pd.merge` function works the same on tables (`DataFrame`) and vector layer (`GeoDataFrame`) objects, the only important difference being the presence of the geometry column (which is not involved in the join operation anyway). The result of data joins can be either a `DataFrame` or a `GeoDataFrame` object, depending on the inputs. The most common type of attribute join on spatial data takes a `GeoDataFrame` object as the first argument and adds columns to it from a `DataFrame` specified as the second argument.\n\nTo demonstrate joins, we will combine data on coffee production with the `world` dataset. The coffee data is in a `DataFrame` called `coffee_data` imported from a CSV file. It has 3 columns: \n\n* `name_long` names major coffee-producing nations\n* `coffee_production_2016` and `coffee_production_2017` contain estimated values for coffee production in units of 60-kg bags in each year. \n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ncoffee_data = pd.read_csv('data/coffee_data.csv')\ncoffee_data\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name_long</th>\n      <th>coffee_production_2016</th>\n      <th>coffee_production_2017</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Angola</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bolivia</td>\n      <td>3.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Brazil</td>\n      <td>3277.0</td>\n      <td>2786.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Zambia</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Zimbabwe</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>Others</td>\n      <td>23.0</td>\n      <td>26.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>47 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nA left join, which preserves the first dataset, merges `world` with `coffee_data`, based on the common `'name_long'` column:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nworld_coffee = pd.merge(world, coffee_data, on='name_long', how='left')\nworld_coffee\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name_long</th>\n      <th>continent</th>\n      <th>...</th>\n      <th>geometry</th>\n      <th>coffee_production_2016</th>\n      <th>coffee_production_2017</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>MULTIPOLYGON (((-180.00000 -16....</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>MULTIPOLYGON (((33.90371 -0.950...</td>\n      <td>81.0</td>\n      <td>66.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>MULTIPOLYGON (((-8.66559 27.656...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Kosovo</td>\n      <td>Europe</td>\n      <td>...</td>\n      <td>MULTIPOLYGON (((20.59025 41.855...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>North America</td>\n      <td>...</td>\n      <td>MULTIPOLYGON (((-61.68000 10.76...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>South Sudan</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>MULTIPOLYGON (((30.83385 3.5091...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 13 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe result is a `GeoDataFrame` object identical to the original `world` object, but with two new variables (`coffee_production_2016` and `coffee_production_2017`) on coffee production. This can be plotted as a map, as illustrated in @fig-join-coffee-production:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nbase = world.plot(color='white', edgecolor='lightgrey')\nworld_coffee.plot(ax=base, column='coffee_production_2017');\n```\n\n::: {.cell-output .cell-output-display}\n![World coffee production, thousand 60-kg bags by country, in 2017 (source: International Coffee Organization).](03-attribute-operations_files/figure-html/fig-join-coffee-production-output-1.png){#fig-join-coffee-production width=429 height=221}\n:::\n:::\n\n\nFor joining to work, a 'key variable' must be supplied in both datasets. In this case, both `world_coffee` and world objects contained a variable called `name_long`. By default `pd.merge` uses all variables with matching names. However, it is recommended to explicitly specify the names of the columns to be used for matching, like we did in the last example. \n\nIn case where variable names are not the same, you need to rename (using `.rename`) them so that it is, then proceed with the join.\n\nNote that the result `world_coffee` has the same number of rows as the original dataset `world`. Although there are only 47 rows of data in `coffee_data`, all 177 country records are kept intact in `world_coffee`: rows in the original dataset with no match are assigned `np.nan` values for the new coffee production variables. This is characteristic of a lift join (specified with `how='left'`) and is what we typically want to do. \n\nWhat if we only want to keep countries that have a match in the key variable? In that case an inner join can be used:\n\n\n\n### Creating attributes and removing spatial information\n\nCalculate new column...\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nworld2 = world.copy()\nworld2['pop_dens'] = world2['pop'] / world2['area_km2']\n```\n:::\n\n\nUnite columns...\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nworld2['con_reg'] = world['continent'] + ':' + world2['region_un']\nworld2 = world2.drop(['continent', 'region_un'], axis=1)\n```\n:::\n\n\nSplit column...\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nworld2[['continent', 'region_un']] = world2['con_reg'] \\\n    .str.split(':', expand=True)\n```\n:::\n\n\nRename...\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nworld2.rename(columns={'name_long': 'name'})\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_a2</th>\n      <th>name</th>\n      <th>subregion</th>\n      <th>...</th>\n      <th>con_reg</th>\n      <th>continent</th>\n      <th>region_un</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Melanesia</td>\n      <td>...</td>\n      <td>Oceania:Oceania</td>\n      <td>Oceania</td>\n      <td>Oceania</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Eastern Africa</td>\n      <td>...</td>\n      <td>Africa:Africa</td>\n      <td>Africa</td>\n      <td>Africa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>Northern Africa</td>\n      <td>...</td>\n      <td>Africa:Africa</td>\n      <td>Africa</td>\n      <td>Africa</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Kosovo</td>\n      <td>Southern Europe</td>\n      <td>...</td>\n      <td>Europe:Europe</td>\n      <td>Europe</td>\n      <td>Europe</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>Caribbean</td>\n      <td>...</td>\n      <td>North America:Americas</td>\n      <td>North America</td>\n      <td>Americas</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>South Sudan</td>\n      <td>Eastern Africa</td>\n      <td>...</td>\n      <td>Africa:Africa</td>\n      <td>Africa</td>\n      <td>Africa</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 13 columns</p>\n</div>\n```\n:::\n:::\n\n\nRenaming all columns...\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nnew_names =['i', 'n', 'c', 'r', 's', 't', 'a', 'p', 'l', 'gP', 'geom']\nworld.columns = new_names\n```\n:::\n\n\nReordering columns, for example reverse alphabetical order...\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nnames = sorted(world.columns, reverse=True)\nworld2 = world[names]\nworld2\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>t</th>\n      <th>s</th>\n      <th>r</th>\n      <th>...</th>\n      <th>gP</th>\n      <th>c</th>\n      <th>a</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Sovereign country</td>\n      <td>Melanesia</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>8222.253784</td>\n      <td>Oceania</td>\n      <td>19289.970733</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Sovereign country</td>\n      <td>Eastern Africa</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>2402.099404</td>\n      <td>Africa</td>\n      <td>932745.792357</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Indeterminate</td>\n      <td>Northern Africa</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>Africa</td>\n      <td>96270.601041</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>Sovereign country</td>\n      <td>Southern Europe</td>\n      <td>Europe</td>\n      <td>...</td>\n      <td>8698.291559</td>\n      <td>Europe</td>\n      <td>11230.261672</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>Sovereign country</td>\n      <td>Caribbean</td>\n      <td>Americas</td>\n      <td>...</td>\n      <td>31181.821196</td>\n      <td>North America</td>\n      <td>7737.809855</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>Sovereign country</td>\n      <td>Eastern Africa</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>1935.879400</td>\n      <td>Africa</td>\n      <td>624909.099086</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nDropping geometry...\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\npd.DataFrame(world.drop(columns='geom'))\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>i</th>\n      <th>n</th>\n      <th>c</th>\n      <th>...</th>\n      <th>p</th>\n      <th>l</th>\n      <th>gP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FJ</td>\n      <td>Fiji</td>\n      <td>Oceania</td>\n      <td>...</td>\n      <td>885806.0</td>\n      <td>69.960000</td>\n      <td>8222.253784</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TZ</td>\n      <td>Tanzania</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>52234869.0</td>\n      <td>64.163000</td>\n      <td>2402.099404</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EH</td>\n      <td>Western Sahara</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>XK</td>\n      <td>Kosovo</td>\n      <td>Europe</td>\n      <td>...</td>\n      <td>1821800.0</td>\n      <td>71.097561</td>\n      <td>8698.291559</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>TT</td>\n      <td>Trinidad and Tobago</td>\n      <td>North America</td>\n      <td>...</td>\n      <td>1354493.0</td>\n      <td>70.426000</td>\n      <td>31181.821196</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>SS</td>\n      <td>South Sudan</td>\n      <td>Africa</td>\n      <td>...</td>\n      <td>11530971.0</td>\n      <td>55.817000</td>\n      <td>1935.879400</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Manipulating raster objects\n\n### Raster subsetting\n\nWhen using `rasterio`, raster values are accessible through a `numpy` array, which can be imported with the `.read` method:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nelev = src_elev.read(1)\nelev\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\narray([[ 1.,  2.,  3.,  4.,  5.,  6.],\n       [ 7.,  8.,  9., 10., 11., 12.],\n       [13., 14., 15., 16., 17., 18.],\n       [19., 20., 21., 22., 23., 24.],\n       [25., 26., 27., 28., 29., 30.],\n       [31., 32., 33., 34., 35., 36.]], dtype=float32)\n```\n:::\n:::\n\n\nThen, we can access any subset of cell values using `numpy` methods. For example:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nelev[0, 0]  ## Value at row 1, column 1\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n1.0\n```\n:::\n:::\n\n\nCell values can be modified by overwriting existing values in conjunction with a subsetting operation. The following expression, for example, sets the upper left cell of elev to 0:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nelev[0, 0] = 0\nelev\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\narray([[ 0.,  2.,  3.,  4.,  5.,  6.],\n       [ 7.,  8.,  9., 10., 11., 12.],\n       [13., 14., 15., 16., 17., 18.],\n       [19., 20., 21., 22., 23., 24.],\n       [25., 26., 27., 28., 29., 30.],\n       [31., 32., 33., 34., 35., 36.]], dtype=float32)\n```\n:::\n:::\n\n\nMultiple cells can also be modified in this way:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nelev[0, 0:2] = 0\nelev\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\narray([[ 0.,  0.,  3.,  4.,  5.,  6.],\n       [ 7.,  8.,  9., 10., 11., 12.],\n       [13., 14., 15., 16., 17., 18.],\n       [19., 20., 21., 22., 23., 24.],\n       [25., 26., 27., 28., 29., 30.],\n       [31., 32., 33., 34., 35., 36.]], dtype=float32)\n```\n:::\n:::\n\n\n### Summarizing raster objects\n\nGlobal summaries of raster values can be calculated by applying `numpy` summary functions---such as `np.mean`---on the array with raster values. For example:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nnp.mean(elev)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n18.416666\n```\n:::\n:::\n\n\nNote that \"No Data\"-safe functions--such as `np.nanmean`---should be used in case the raster contains \"No Data\" values which need to be ignored:\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nelev[0, 2] = np.nan\nelev\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\narray([[ 0.,  0., nan,  4.,  5.,  6.],\n       [ 7.,  8.,  9., 10., 11., 12.],\n       [13., 14., 15., 16., 17., 18.],\n       [19., 20., 21., 22., 23., 24.],\n       [25., 26., 27., 28., 29., 30.],\n       [31., 32., 33., 34., 35., 36.]], dtype=float32)\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nnp.mean(elev)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nnan\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nnp.nanmean(elev)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n18.857143\n```\n:::\n:::\n\n\nRaster value statistics can be visualized in a variety of ways. One approach is to \"flatten\" the raster values into a one-dimensional array, then use a graphical function such as `plt.hist` or `plt.boxplot` (from `matplotlib.pyplot`). For example:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nx = elev.flatten()\nplt.hist(x);\n```\n\n::: {.cell-output .cell-output-display}\n![](03-attribute-operations_files/figure-html/cell-41-output-1.png){width=422 height=404}\n:::\n:::\n\n\n## Exercises\n\n",
    "supporting": [
      "03-attribute-operations_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}